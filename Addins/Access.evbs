Option Explicit
' WshScript Build System
' Copyright (c) 2010 Harry Steinhilber, Jr.

' Permission is hereby granted, free of charge, to any person obtaining a copy
' of this software and associated documentation files (the "Software"), to deal
' in the Software without restriction, including without limitation the rights
' to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
' copies of the Software, and to permit persons to whom the Software is
' furnished to do so, subject to the following conditions:

' The above copyright notice and this permission notice shall be included in
' all copies or substantial portions of the Software.

' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
' IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
' AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
' LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
' THE SOFTWARE.

Public Const acTable = 0
Public Const acQuery = 1
Public Const acForm = 2
Public Const acReport = 3
Public Const acMacro = 4
Public Const acModule = 5

Private Const acExportDelim = 2

Public Access ' InitializeAccessAddin dependency task will initialize this variable for use in tasks

Class AccessAddin
  Private InnerApplication

  Public Sub Class_Initialize()
    Set InnerApplication = CreateObject("Access.Application")
  End Sub

  Public Sub Class_Terminate()   
    If Not InnerApplication Is Nothing Then InnerApplication.Quit
    Set InnerApplication = Nothing
  End Sub

  Public Property Get Application()
    Set Application = InnerApplication
  End Property

  Public Sub OpenDatabase(ByVal DatabaseFileName)
    DatabaseFileName = ExpandPath(DatabaseFileName)
    If CheckFileExtension(DatabaseFileName, ".adp") Or CheckFileExtension(DatabaseFileName, ".ade") Then
      InnerApplication.OpenAccessProject DatabaseFileName
    Else
      InnerApplication.OpenCurrentDatabase DatabaseFileName
    End If
  End Sub

  Public Sub CloseDatabase()
    InnerApplication.CloseCurrentDatabase
  End Sub

  Public Sub CompileDatabase()
    Dim SourcePath, DestinationPath

    SourcePath = InnerApplication.CurrentProject.FullName
    DestinationPath = Left(SourcePath, Len(SourcePath) - 1) & "e"

    ' HACK: Using an undocumented SysCmd to build MDE/ADE files
    Me.CloseDatabase
    InnerApplication.SysCmd 603, CStr(SourcePath), CStr(DestinationPath)
    Me.OpenDatabase SourcePath
  End Sub

  Public Property Get Properties(ByVal Name)
    On Error Resume Next
    Properties = InnerApplication.CurrentProject.Properties(Name)
    If Err = 2455 Then
      InnerApplication.CurrentProject.Properties.Add Name, vbNullString
      Properties = vbNullString
    End If
  End Property
  Public Property Let Properties(ByVal Name, ByVal Value)
    InnerApplication.CurrentProject.Properties.Add Name, Value
  End Property

  Public Sub ExportObjects(ByVal ExportPath)
    On Error Resume Next 
    
    Dim FilePath: FilePath = InnerApplication.CurrentProject.FullName
    ExportPath = ExpandPath(ExportPath)
    If Not FileSystem.FolderExists(ExportPath) Then FileSystem.CreateFolder ExportPath

    If CheckFileExtension(FilePath, ".adp") Or CheckFileExtension(FilePath, ".ade") Then    
        ExtractAccessProjectObjects FilePath, ExportPath
    Else    
        ExtractAccessDatabaseObjects FilePath, ExportPath
    End If
  End Sub 

  Private Sub ExtractAccessDatabaseObjects(ByVal DatabaseFileName, ByVal ExportPath)
    Dim Database, DbObject, OutputPath
    On Error Resume Next 
    
    Set Database = InnerApplication.CurrentDb 
    
    ExportAccessContainerDocuments Database.Containers, FileSystem.BuildPath(ExportPath, "Forms"), acForm
    
    ExportAccessContainerDocuments Database.Containers, FileSystem.BuildPath(ExportPath, "Reports"), acReport
    
    ExportAccessContainerDocuments Database.Containers, FileSystem.BuildPath(ExportPath, "Scripts"), acMacro
    
    ExportAccessContainerDocuments Database.Containers, FileSystem.BuildPath(ExportPath, "Modules"), acModule    
    
    WScript.Echo "Exporting Tables..."
    OutputPath = FileSystem.BuildPath(ExportPath, "Tables")
    If FileSystem.FolderExists(OutputPath) Then FileSystem.DeleteFolder OutputPath
    FileSystem.CreateFolder OutputPath
    For Each DbObject In Database.TableDefs
        If Not StrStartsWith(DbObject.Name, "msys") And Not StrStartsWith(DbObject.Name, "~") Then
            If Len(DbObject.Connect) = 0 Then
                InnerApplication.ExportXML acTable, DbObject.Name, , FileSystem.BuildPath(OutputPath, DbObject.Name)
            Else
                ExportLinkedTable  DbObject, FileSystem.GetParentFolderName(DatabaseFileName), _
                    FileSystem.BuildPath(OutputPath, DbObject.Name)
            End If
        End If
    Next
    
    WScript.Echo "Exporting Queries..."
    OutputPath = FileSystem.BuildPath(ExportPath, "Queries")
    If FileSystem.FolderExists(OutputPath) Then FileSystem.DeleteFolder OutputPath
    FileSystem.CreateFolder OutputPath
    For Each DbObject In Database.QueryDefs
        If Not StrStartsWith(DbObject.Name, "~") Then
            InnerApplication.SaveAsText acQuery, DbObject.Name, FileSystem.BuildPath(OutputPath, DbObject.Name)
        End If
    Next 
  End Sub

  Private Sub ExportLinkedTable(ByVal DbObject, ByVal DatabasePath, ByVal OutputFilePath)
    Dim TextFile, LinkPath, LocalName, SourceName
    
    LocalName = DbObject.Name
    SourceName = DbObject.SourceTableName
    LinkPath = Mid(DbObject.Connect, 11)
    If InStr(LinkPath, DatabasePath) = 1 Then 
        LinkPath = Replace(LinkPath, DatabasePath, "")
        LinkPath = FileSystem.BuildPath(".", LinkPath)
    End If
    
    Set TextFile = FileSystem.CreateTextFile(OutputFilePath, True)
    TextFile.Write "<?xml version=""1.0""?>" & vbNewLine & _
                   "<table name=""" & LocalName & """>" & vbNewLine & _
                   "  <database>" & LinkPath & "</database>" & vbNewLine & _
                   "  <source>" & SourceName & "</source>" & vbNewLine & _
                   "</table>"
    TextFile.Close
    Set TextFile = Nothing 
  End Sub

  Private Sub ExportAccessContainerDocuments(ByVal Containers, ByVal ExportPath, ByVal ObjectType)
    Dim Current, DbObject 
    
    Current = FileSystem.GetBaseName(ExportPath)
    WScript.Echo "Exporting " & Current & "..."
    If FileSystem.FolderExists(ExportPath) Then FileSystem.DeleteFolder ExportPath
    FileSystem.CreateFolder ExportPath
    
    For Each DbObject In Containers(Current).Documents
        InnerApplication.SaveAsText ObjectType, DbObject.Name, FileSystem.BuildPath(ExportPath, DbObject.Name)
    Next
  End Sub

  Private Sub ExtractAccessProjectObjects(ByVal DatabaseFileName, ByVal ExportPath)
    Dim Project
    On Error Resume Next

    Set Project = InnerApplication.CurrentProject
    
    ExportAccessProjectObjects Project.AllForms, FileSystem.BuildPath(ExportPath, "Forms"), acForm
    
    ExportAccessProjectObjects Project.AllReports, FileSystem.BuildPath(ExportPath, "Reports"), acReport
    
    ExportAccessProjectObjects Project.AllMacros, FileSystem.BuildPath(ExportPath, "Macros"), acMacro
    
    ExportAccessProjectObjects Project.AllModules, FileSystem.BuildPath(ExportPath, "Modules"), acModule
    
    WScript.Echo "Exporting Tables..."
    Rem For Each td In db.TableDefs 'Tables
        Rem If Left(td.Name, 4) <> "MSys" Then
            Rem DoCmd.TransferText acExportDelim, , td.Name, ExportPath & "Table_" & td.Name & ".txt", True
        Rem End If
    Rem Next td
    
    WScript.Echo "Exporting Queries..."
    Rem For i = 0 To db.QueryDefs.Count - 1
        Rem Application.SaveAsText acQuery, db.QueryDefs(i).Name, ExportPath & "Query_" & db.QueryDefs(i).Name & ".txt"
    Rem Next i
    
    Set Project = Nothing
  End Sub 

  Private Sub ExportAccessProjectObjects(ByVal Objects, ByVal ExportPath, ByVal ObjectType)
    Dim AccessObject 
    
    WScript.Echo "Exporting " & FileSystem.GetBaseName(ExportPath) & "..."
    If FileSystem.FolderExists(ExportPath) Then FileSystem.DeleteFolder ExportPath
    FileSystem.CreateFolder ExportPath
    
    For Each AccessObject In Objects
        InnerApplication.SaveAsText ObjectType, AccessObject.Name, FileSystem.BuildPath(ExportPath, AccessObject.Name)
    Next
  End Sub 

  Private Function ExpandPath(ByVal Path)
    ExpandPath = WshShell.ExpandEnvironmentStrings(Path)
    ExpandPath = FileSystem.GetAbsolutePathName(ExpandPath)
  End Function

  Private Function CheckFileExtension(ByVal Path, ByVal Extension)
    CheckFileExtension = (LCase(FileSystem.GetExtensionName(Path)) = LCase(Extension))
  End Function
End Class

Public Sub InitializeAccessAddin()
  Set Access = New AccessAddin
End Sub
